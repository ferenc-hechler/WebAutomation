# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestGettitles():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def wait_for_window(self, timeout = 2):
    time.sleep(round(timeout / 1000))
    wh_now = self.driver.window_handles
    wh_then = self.vars["window_handles"]
    if len(wh_now) > len(wh_then):
      return set(wh_now).difference(set(wh_then)).pop()
  
  def test_gettitles(self):
    # Test name: gettitles
    # Step # | name | target | value
    # 1 | click | css=.secondary-caret | 
    self.driver.find_element(By.CSS_SELECTOR, ".secondary-caret").click()
    # 2 | click | linkText=Einkäufe | 
    self.driver.find_element(By.LINK_TEXT, "Einkäufe").click()
    # 3 | type | id=purchase-search | book
    self.driver.find_element(By.ID, "purchase-search").send_keys("book")
    # 4 | storeText | css=.row:nth-child(1) > .product-name | title1
    self.vars["title1"] = self.driver.find_element(By.CSS_SELECTOR, ".row:nth-child(1) > .product-name").text
    # 5 | click | css=.row:nth-child(2) > .product-name | 
    self.vars["window_handles"] = self.driver.window_handles
    # 6 | storeWindowHandle | root | 
    self.driver.find_element(By.CSS_SELECTOR, ".row:nth-child(2) > .product-name").click()
    # 7 | selectWindow | handle=${win3502} | 
    self.vars["win3502"] = self.wait_for_window(2000)
    # 8 | selectWindow | handle=${root} | 
    self.vars["root"] = self.driver.current_window_handle
    # 9 | storeText | css=.row:nth-child(2) > .product-name | title2
    self.driver.switch_to.window(self.vars["win3502"])
    # 10 | storeText | css=.row:nth-child(3) > .product-name | title3
    self.driver.switch_to.window(self.vars["root"])
    # 11 | storeTitle | Humble Bundle - humblebundle@fh.anderemails.de | tit98
    self.vars["title2"] = self.driver.find_element(By.CSS_SELECTOR, ".row:nth-child(2) > .product-name").text
    # 12 | click | css=.js-pagination-holder:nth-child(2) .hb | 
    self.vars["title3"] = self.driver.find_element(By.CSS_SELECTOR, ".row:nth-child(3) > .product-name").text
    # 13 | click | css=.js-pagination-holder:nth-child(2) .hb-chevron-right | 
    self.vars["tit98"] = self.driver.title
    # 14 | click | css=.js-pagination-holder:nth-child(2) .hb-chevron-right | 
    self.driver.find_element(By.CSS_SELECTOR, ".js-pagination-holder:nth-child(2) .hb").click()
    # 15 | click | css=.js-pagination-holder:nth-child(2) .hb-chevron-left | 
    self.driver.find_element(By.CSS_SELECTOR, ".js-pagination-holder:nth-child(2) .hb-chevron-right").click()
    # 16 | click | css=.js-pagination-holder:nth-child(2) .hb-chevron-left | 
    self.driver.find_element(By.CSS_SELECTOR, ".js-pagination-holder:nth-child(2) .hb-chevron-right").click()
    # 17 | click | css=.js-pagination-holder:nth-child(2) .hb-chevron-left | 
    self.driver.find_element(By.CSS_SELECTOR, ".js-pagination-holder:nth-child(2) .hb-chevron-left").click()
    # 18 | click | css=.js-pagination-holder:nth-child(2) .hb | 
    self.driver.find_element(By.CSS_SELECTOR, ".js-pagination-holder:nth-child(2) .hb-chevron-left").click()
    self.driver.find_element(By.CSS_SELECTOR, ".js-pagination-holder:nth-child(2) .hb-chevron-left").click()
    self.driver.find_element(By.CSS_SELECTOR, ".js-pagination-holder:nth-child(2) .hb").click()
  
